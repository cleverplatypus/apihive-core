import{_ as e,c as a,o as i,a3 as t}from"./chunks/framework.DJIHrpKd.js";const c=JSON.parse('{"title":"Type Alias: APIConfig<TApiConfig>","description":"","frontmatter":{},"headers":[],"relativePath":"api/index/type-aliases/APIConfig.md","filePath":"api/index/type-aliases/APIConfig.md"}'),n={name:"api/index/type-aliases/APIConfig.md"};function r(p,s,h,l,o,d){return i(),a("div",null,[...s[0]||(s[0]=[t(`<p><a href="./../../README.html"><strong>@apihive/core</strong></a></p><hr><p><a href="./../../modules.html">@apihive/core</a> / <a href="./../README.html">index</a> / APIConfig</p><h1 id="type-alias-apiconfig-tapiconfig" tabindex="-1">Type Alias: APIConfig&lt;TApiConfig&gt; <a class="header-anchor" href="#type-alias-apiconfig-tapiconfig" aria-label="Permalink to &quot;Type Alias: APIConfig\\&lt;TApiConfig\\&gt;&quot;">​</a></h1><blockquote><p><strong>APIConfig</strong>&lt;<code>TApiConfig</code>&gt; = <code>object</code></p></blockquote><p>Defined in: <a href="https://github.com/cleverplatypus/apihive-core/blob/8576eea91e7e4d9e5485b86d7ca3c0df4a424549/src/types.ts#L448" target="_blank" rel="noreferrer">types.ts:448</a></p><p>Configuration for an API to be added with <a href="./../classes/HTTPRequestFactory.html#withapiconfig">HTTPRequestFactory.withAPIConfig</a></p><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Function-based API definition for type-safe code generation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GitHubAPI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  endpoints</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    getUser</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">params</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pathParams</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">username</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    createRepo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">params</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">      pathParams</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">owner</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">      bodyParams</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">description</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Repository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  meta</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">requiresAuth</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> APIConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GitHubAPI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;github&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  endpoints: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    getUser: { target: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/users/{username}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    createRepo: { target: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/repos&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;POST&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Adapter-driven API (no endpoints allowed)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OpenAPIConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  meta</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">openAPI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">spec</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } };</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  endpoints</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> never</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> APIConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OpenAPIConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// endpoints property forbidden</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Unconstrained API (default)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> APIConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myapi&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  endpoints: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    anyEndpoint: { target: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/any/path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Any endpoint name allowed</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><h3 id="tapiconfig" tabindex="-1">TApiConfig <a class="header-anchor" href="#tapiconfig" aria-label="Permalink to &quot;TApiConfig&quot;">​</a></h3><p><code>TApiConfig</code> <em>extends</em> <a href="./BaseAPIInterface.html"><code>BaseAPIInterface</code></a> = <a href="./DefaultAPIConfig.html"><code>DefaultAPIConfig</code></a></p><p>Configuration interface that constrains meta and endpoints. Must extend BaseAPIInterface for function-based endpoint definitions.</p><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><h3 id="baseurl" tabindex="-1">baseURL? <a class="header-anchor" href="#baseurl" aria-label="Permalink to &quot;baseURL?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>baseURL</strong>: <code>string</code></p></blockquote><p>Defined in: <a href="https://github.com/cleverplatypus/apihive-core/blob/8576eea91e7e4d9e5485b86d7ca3c0df4a424549/src/types.ts#L453" target="_blank" rel="noreferrer">types.ts:453</a></p><p>The base to be used as base URL for this API. If omitted, the value provided in each endpoint&#39;s <code>target</code> will be used.</p><hr><h3 id="endpoints" tabindex="-1">endpoints <a class="header-anchor" href="#endpoints" aria-label="Permalink to &quot;endpoints&quot;">​</a></h3><blockquote><p><strong>endpoints</strong>: <code>TApiConfig</code> <em>extends</em> <code>object</code> ? <code>never</code> : <code>TApiConfig</code> <em>extends</em> <code>object</code> ? <code>{ [P in Extract&lt;K, string&gt;]: Endpoint }</code> : <code>object</code></p></blockquote><p>Defined in: <a href="https://github.com/cleverplatypus/apihive-core/blob/8576eea91e7e4d9e5485b86d7ca3c0df4a424549/src/types.ts#L501" target="_blank" rel="noreferrer">types.ts:501</a></p><p>A map of <a href="./Endpoint.html">Endpoint</a> for the API. Can be constrained or forbidden by the TApiConfig generic parameter.</p><h4 id="examples-1" tabindex="-1">Examples <a class="header-anchor" href="#examples-1" aria-label="Permalink to &quot;Examples&quot;">​</a></h4><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// For adapter-driven APIs, endpoints can be forbidden:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// endpoints?: never (prevents manual endpoint configuration)</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// For function-based APIs, only specific endpoint names are allowed:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// endpoints: { getUser: Endpoint; getUserRepos: Endpoint } (constrains keys)</span></span></code></pre></div><hr><h3 id="errorinterceptors" tabindex="-1">errorInterceptors? <a class="header-anchor" href="#errorinterceptors" aria-label="Permalink to &quot;errorInterceptors?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>errorInterceptors</strong>: <a href="./ErrorInterceptor.html"><code>ErrorInterceptor</code></a> | <a href="./ErrorInterceptor.html"><code>ErrorInterceptor</code></a>[]</p></blockquote><p>Defined in: <a href="https://github.com/cleverplatypus/apihive-core/blob/8576eea91e7e4d9e5485b86d7ca3c0df4a424549/src/types.ts#L487" target="_blank" rel="noreferrer">types.ts:487</a></p><hr><h3 id="headers" tabindex="-1">headers? <a class="header-anchor" href="#headers" aria-label="Permalink to &quot;headers?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>headers</strong>: <code>Record</code>&lt;<code>string</code>, <a href="./HeaderValue.html"><code>HeaderValue</code></a>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/cleverplatypus/apihive-core/blob/8576eea91e7e4d9e5485b86d7ca3c0df4a424549/src/types.ts#L471" target="_blank" rel="noreferrer">types.ts:471</a></p><p>Any headers that should be applied to each request. Notice that if a header value is <a href="./DynamicHeaderValue.html">DynamicHeaderValue</a>, the function will be called with the current request as argument, so conditional logic can be applied to generate the value.</p><hr><h3 id="meta" tabindex="-1">meta? <a class="header-anchor" href="#meta" aria-label="Permalink to &quot;meta?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>meta</strong>: <code>TApiConfig</code> <em>extends</em> <code>object</code> ? <code>TMeta</code> : <code>any</code></p></blockquote><p>Defined in: <a href="https://github.com/cleverplatypus/apihive-core/blob/8576eea91e7e4d9e5485b86d7ca3c0df4a424549/src/types.ts#L464" target="_blank" rel="noreferrer">types.ts:464</a></p><p>Any metadata that should be attached to the API for later reference. The structure is constrained by the TApiConfig generic parameter.</p><hr><h3 id="name" tabindex="-1">name <a class="header-anchor" href="#name" aria-label="Permalink to &quot;name&quot;">​</a></h3><blockquote><p><strong>name</strong>: <code>string</code> | <code>&quot;default&quot;</code></p></blockquote><p>Defined in: <a href="https://github.com/cleverplatypus/apihive-core/blob/8576eea91e7e4d9e5485b86d7ca3c0df4a424549/src/types.ts#L459" target="_blank" rel="noreferrer">types.ts:459</a></p><p>The name of the API to be referenced in <a href="./../classes/HTTPRequestFactory.html#createapirequest">HTTPRequestFactory.createAPIRequest</a> If the name is &#39;default&#39; it will be used as the default API when calling <a href="./../classes/HTTPRequestFactory.html#createapirequest">HTTPRequestFactory.createAPIRequest</a> with one argument (the name of the endpoint).</p><hr><h3 id="progresshandlers" tabindex="-1">progressHandlers? <a class="header-anchor" href="#progresshandlers" aria-label="Permalink to &quot;progressHandlers?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>progressHandlers</strong>: <a href="./ProgressHandlerConfig.html"><code>ProgressHandlerConfig</code></a> | <a href="./ProgressHandlerConfig.html"><code>ProgressHandlerConfig</code></a>[]</p></blockquote><p>Defined in: <a href="https://github.com/cleverplatypus/apihive-core/blob/8576eea91e7e4d9e5485b86d7ca3c0df4a424549/src/types.ts#L509" target="_blank" rel="noreferrer">types.ts:509</a></p><hr><h3 id="requestinterceptors" tabindex="-1">requestInterceptors? <a class="header-anchor" href="#requestinterceptors" aria-label="Permalink to &quot;requestInterceptors?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>requestInterceptors</strong>: <a href="./RequestInterceptor.html"><code>RequestInterceptor</code></a> | <a href="./RequestInterceptor.html"><code>RequestInterceptor</code></a>[]</p></blockquote><p>Defined in: <a href="https://github.com/cleverplatypus/apihive-core/blob/8576eea91e7e4d9e5485b86d7ca3c0df4a424549/src/types.ts#L486" target="_blank" rel="noreferrer">types.ts:486</a></p><hr><h3 id="responsebodytransformers" tabindex="-1">responseBodyTransformers? <a class="header-anchor" href="#responsebodytransformers" aria-label="Permalink to &quot;responseBodyTransformers?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>responseBodyTransformers</strong>: <a href="./ResponseBodyTransformer.html"><code>ResponseBodyTransformer</code></a> | <a href="./ResponseBodyTransformer.html"><code>ResponseBodyTransformer</code></a>[]</p></blockquote><p>Defined in: <a href="https://github.com/cleverplatypus/apihive-core/blob/8576eea91e7e4d9e5485b86d7ca3c0df4a424549/src/types.ts#L476" target="_blank" rel="noreferrer">types.ts:476</a></p><p>An optional <a href="./ResponseBodyTransformer.html">ResponseBodyTransformer</a> function to be applied to all of the API&#39;s responses.</p><hr><h3 id="responseinterceptors" tabindex="-1">responseInterceptors? <a class="header-anchor" href="#responseinterceptors" aria-label="Permalink to &quot;responseInterceptors?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>responseInterceptors</strong>: <a href="./ResponseInterceptor.html"><code>ResponseInterceptor</code></a> | <a href="./ResponseInterceptor.html"><code>ResponseInterceptor</code></a>[]</p></blockquote><p>Defined in: <a href="https://github.com/cleverplatypus/apihive-core/blob/8576eea91e7e4d9e5485b86d7ca3c0df4a424549/src/types.ts#L483" target="_blank" rel="noreferrer">types.ts:483</a></p><p>Optional response interceptors applied to all requests of this API. Interceptors can be functions or registrations that control transformer behavior.</p><hr><h3 id="retry" tabindex="-1">retry? <a class="header-anchor" href="#retry" aria-label="Permalink to &quot;retry?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>retry</strong>: <a href="./RetryArg.html"><code>RetryArg</code></a></p></blockquote><p>Defined in: <a href="https://github.com/cleverplatypus/apihive-core/blob/8576eea91e7e4d9e5485b86d7ca3c0df4a424549/src/types.ts#L510" target="_blank" rel="noreferrer">types.ts:510</a></p><hr><h3 id="sselisteners" tabindex="-1">SSEListeners? <a class="header-anchor" href="#sselisteners" aria-label="Permalink to &quot;SSEListeners?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>SSEListeners</strong>: <a href="./SSEListener.html"><code>SSEListener</code></a> | <a href="./SSEListener.html"><code>SSEListener</code></a>[]</p></blockquote><p>Defined in: <a href="https://github.com/cleverplatypus/apihive-core/blob/8576eea91e7e4d9e5485b86d7ca3c0df4a424549/src/types.ts#L508" target="_blank" rel="noreferrer">types.ts:508</a></p>`,73)])])}const g=e(n,[["render",r]]);export{c as __pageData,g as default};
